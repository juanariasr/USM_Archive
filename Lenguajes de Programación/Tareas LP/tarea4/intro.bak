#lang scheme

;operaciones
(+ 1 2)
(* 2 3 4)
(printf "\n")

;comparadores
(or (< 5 4)
    (equal? 1 (- 6 5)))
(and (not (zero? 10))
(+ 1 2 3))
(printf "\n")

;manipulacion de strings
(string-append "ho" "la")
(string-length "hayase nagatoro")
(substring "Gamo-chan" 1 3)
(string->symbol "SOSOS")
(printf "\n")

;printf
(printf "hola~n")
(printf "hola ~a ~s~n" "mundo" "feliz")
(printf "\n")

;condicionales
(if (> 4 10)
    "hola"
    "chao")
(if (> 12 10)
    "hola"
    "chao")
(cond [(> 2 3) (printf "hola")]
      [(> 6 5) (printf "chao")]
      [else #f])
(printf "\n")

;definir identificadores
(define MAX 100)
(< 25 MAX)
(define x 10)
(+ x 1)
(define !λ=>-α/β? "weird")
!λ=>-α/β?
(printf "\n")


;variables locales con let
;x en este punto es 10
(let ([x 3]
      [y 2])
  (+ x y))
x

(let* ([a 3] ;let* es equivalente a lets anidados para que la linea 57 funcione
       [b (+ a a)])
  b)
(printf "\n")

;definir funciones
(define (double x)
  (+ x x))
 (double 2)

(define (foo x)
  (if (< x 10)
      (printf "menor")
      (printf "mayor")))
(foo 4) (printf "\n")
(foo 10)