// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: stratagems/stratagems.proto

package stratagems

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SuperEarthServiceClient is the client API for SuperEarthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SuperEarthServiceClient interface {
	Resupply(ctx context.Context, in *HelldiverRequest, opts ...grpc.CallOption) (*SuperEarthAnswer, error)
	EndServer(ctx context.Context, in *QuitMessage, opts ...grpc.CallOption) (*QuitMessage, error)
}

type superEarthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSuperEarthServiceClient(cc grpc.ClientConnInterface) SuperEarthServiceClient {
	return &superEarthServiceClient{cc}
}

func (c *superEarthServiceClient) Resupply(ctx context.Context, in *HelldiverRequest, opts ...grpc.CallOption) (*SuperEarthAnswer, error) {
	out := new(SuperEarthAnswer)
	err := c.cc.Invoke(ctx, "/stratagems.SuperEarthService/Resupply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superEarthServiceClient) EndServer(ctx context.Context, in *QuitMessage, opts ...grpc.CallOption) (*QuitMessage, error) {
	out := new(QuitMessage)
	err := c.cc.Invoke(ctx, "/stratagems.SuperEarthService/EndServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SuperEarthServiceServer is the server API for SuperEarthService service.
// All implementations must embed UnimplementedSuperEarthServiceServer
// for forward compatibility
type SuperEarthServiceServer interface {
	Resupply(context.Context, *HelldiverRequest) (*SuperEarthAnswer, error)
	EndServer(context.Context, *QuitMessage) (*QuitMessage, error)
	mustEmbedUnimplementedSuperEarthServiceServer()
}

// UnimplementedSuperEarthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSuperEarthServiceServer struct {
}

func (UnimplementedSuperEarthServiceServer) Resupply(context.Context, *HelldiverRequest) (*SuperEarthAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resupply not implemented")
}
func (UnimplementedSuperEarthServiceServer) EndServer(context.Context, *QuitMessage) (*QuitMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndServer not implemented")
}
func (UnimplementedSuperEarthServiceServer) mustEmbedUnimplementedSuperEarthServiceServer() {}

// UnsafeSuperEarthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SuperEarthServiceServer will
// result in compilation errors.
type UnsafeSuperEarthServiceServer interface {
	mustEmbedUnimplementedSuperEarthServiceServer()
}

func RegisterSuperEarthServiceServer(s grpc.ServiceRegistrar, srv SuperEarthServiceServer) {
	s.RegisterService(&SuperEarthService_ServiceDesc, srv)
}

func _SuperEarthService_Resupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelldiverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperEarthServiceServer).Resupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratagems.SuperEarthService/Resupply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperEarthServiceServer).Resupply(ctx, req.(*HelldiverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperEarthService_EndServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuitMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperEarthServiceServer).EndServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratagems.SuperEarthService/EndServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperEarthServiceServer).EndServer(ctx, req.(*QuitMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// SuperEarthService_ServiceDesc is the grpc.ServiceDesc for SuperEarthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SuperEarthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stratagems.SuperEarthService",
	HandlerType: (*SuperEarthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Resupply",
			Handler:    _SuperEarthService_Resupply_Handler,
		},
		{
			MethodName: "EndServer",
			Handler:    _SuperEarthService_EndServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stratagems/stratagems.proto",
}
