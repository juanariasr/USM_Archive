// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: namenode_backend/namenode.proto

package namenode_backend

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NamenodeServiceClient is the client API for NamenodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NamenodeServiceClient interface {
	SaveStep(ctx context.Context, in *SaveStepRequest, opts ...grpc.CallOption) (*SaveStepResponse, error)
	GetIdStepts(ctx context.Context, in *GetIdSteptsRequest, opts ...grpc.CallOption) (*GetIdSteptsResponse, error)
}

type namenodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNamenodeServiceClient(cc grpc.ClientConnInterface) NamenodeServiceClient {
	return &namenodeServiceClient{cc}
}

func (c *namenodeServiceClient) SaveStep(ctx context.Context, in *SaveStepRequest, opts ...grpc.CallOption) (*SaveStepResponse, error) {
	out := new(SaveStepResponse)
	err := c.cc.Invoke(ctx, "/namenode_backend.NamenodeService/SaveStep", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namenodeServiceClient) GetIdStepts(ctx context.Context, in *GetIdSteptsRequest, opts ...grpc.CallOption) (*GetIdSteptsResponse, error) {
	out := new(GetIdSteptsResponse)
	err := c.cc.Invoke(ctx, "/namenode_backend.NamenodeService/GetIdStepts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NamenodeServiceServer is the server API for NamenodeService service.
// All implementations must embed UnimplementedNamenodeServiceServer
// for forward compatibility
type NamenodeServiceServer interface {
	SaveStep(context.Context, *SaveStepRequest) (*SaveStepResponse, error)
	GetIdStepts(context.Context, *GetIdSteptsRequest) (*GetIdSteptsResponse, error)
	mustEmbedUnimplementedNamenodeServiceServer()
}

// UnimplementedNamenodeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNamenodeServiceServer struct {
}

func (UnimplementedNamenodeServiceServer) SaveStep(context.Context, *SaveStepRequest) (*SaveStepResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveStep not implemented")
}
func (UnimplementedNamenodeServiceServer) GetIdStepts(context.Context, *GetIdSteptsRequest) (*GetIdSteptsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdStepts not implemented")
}
func (UnimplementedNamenodeServiceServer) mustEmbedUnimplementedNamenodeServiceServer() {}

// UnsafeNamenodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NamenodeServiceServer will
// result in compilation errors.
type UnsafeNamenodeServiceServer interface {
	mustEmbedUnimplementedNamenodeServiceServer()
}

func RegisterNamenodeServiceServer(s grpc.ServiceRegistrar, srv NamenodeServiceServer) {
	s.RegisterService(&NamenodeService_ServiceDesc, srv)
}

func _NamenodeService_SaveStep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveStepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamenodeServiceServer).SaveStep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/namenode_backend.NamenodeService/SaveStep",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamenodeServiceServer).SaveStep(ctx, req.(*SaveStepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamenodeService_GetIdStepts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIdSteptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamenodeServiceServer).GetIdStepts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/namenode_backend.NamenodeService/GetIdStepts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamenodeServiceServer).GetIdStepts(ctx, req.(*GetIdSteptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NamenodeService_ServiceDesc is the grpc.ServiceDesc for NamenodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NamenodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "namenode_backend.NamenodeService",
	HandlerType: (*NamenodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveStep",
			Handler:    _NamenodeService_SaveStep_Handler,
		},
		{
			MethodName: "GetIdStepts",
			Handler:    _NamenodeService_GetIdStepts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "namenode_backend/namenode.proto",
}
