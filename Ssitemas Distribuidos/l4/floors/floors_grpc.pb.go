// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: floors/floors.proto

package floors

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FloorsServiceClient is the client API for FloorsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FloorsServiceClient interface {
	StartMission(ctx context.Context, in *Start, opts ...grpc.CallOption) (*Start, error)
	MercenaryReady(ctx context.Context, in *ReadyRequest, opts ...grpc.CallOption) (*ReadyAnswer, error)
	Floor1(ctx context.Context, in *Floor1ResultsRequest, opts ...grpc.CallOption) (*Floor1ResultsAnswer, error)
	Floor2(ctx context.Context, in *Floor2PathRequest, opts ...grpc.CallOption) (*Floor2PathAnswer, error)
	Floor3(ctx context.Context, in *Floor3Try, opts ...grpc.CallOption) (*Floor3Try, error)
	Floor3Results(ctx context.Context, in *Floor3ResultsRequest, opts ...grpc.CallOption) (*Floor3ResultsAnswer, error)
}

type floorsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFloorsServiceClient(cc grpc.ClientConnInterface) FloorsServiceClient {
	return &floorsServiceClient{cc}
}

func (c *floorsServiceClient) StartMission(ctx context.Context, in *Start, opts ...grpc.CallOption) (*Start, error) {
	out := new(Start)
	err := c.cc.Invoke(ctx, "/floors.FloorsService/StartMission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *floorsServiceClient) MercenaryReady(ctx context.Context, in *ReadyRequest, opts ...grpc.CallOption) (*ReadyAnswer, error) {
	out := new(ReadyAnswer)
	err := c.cc.Invoke(ctx, "/floors.FloorsService/MercenaryReady", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *floorsServiceClient) Floor1(ctx context.Context, in *Floor1ResultsRequest, opts ...grpc.CallOption) (*Floor1ResultsAnswer, error) {
	out := new(Floor1ResultsAnswer)
	err := c.cc.Invoke(ctx, "/floors.FloorsService/Floor1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *floorsServiceClient) Floor2(ctx context.Context, in *Floor2PathRequest, opts ...grpc.CallOption) (*Floor2PathAnswer, error) {
	out := new(Floor2PathAnswer)
	err := c.cc.Invoke(ctx, "/floors.FloorsService/Floor2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *floorsServiceClient) Floor3(ctx context.Context, in *Floor3Try, opts ...grpc.CallOption) (*Floor3Try, error) {
	out := new(Floor3Try)
	err := c.cc.Invoke(ctx, "/floors.FloorsService/Floor3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *floorsServiceClient) Floor3Results(ctx context.Context, in *Floor3ResultsRequest, opts ...grpc.CallOption) (*Floor3ResultsAnswer, error) {
	out := new(Floor3ResultsAnswer)
	err := c.cc.Invoke(ctx, "/floors.FloorsService/Floor3Results", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FloorsServiceServer is the server API for FloorsService service.
// All implementations must embed UnimplementedFloorsServiceServer
// for forward compatibility
type FloorsServiceServer interface {
	StartMission(context.Context, *Start) (*Start, error)
	MercenaryReady(context.Context, *ReadyRequest) (*ReadyAnswer, error)
	Floor1(context.Context, *Floor1ResultsRequest) (*Floor1ResultsAnswer, error)
	Floor2(context.Context, *Floor2PathRequest) (*Floor2PathAnswer, error)
	Floor3(context.Context, *Floor3Try) (*Floor3Try, error)
	Floor3Results(context.Context, *Floor3ResultsRequest) (*Floor3ResultsAnswer, error)
	mustEmbedUnimplementedFloorsServiceServer()
}

// UnimplementedFloorsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFloorsServiceServer struct {
}

func (UnimplementedFloorsServiceServer) StartMission(context.Context, *Start) (*Start, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartMission not implemented")
}
func (UnimplementedFloorsServiceServer) MercenaryReady(context.Context, *ReadyRequest) (*ReadyAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MercenaryReady not implemented")
}
func (UnimplementedFloorsServiceServer) Floor1(context.Context, *Floor1ResultsRequest) (*Floor1ResultsAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Floor1 not implemented")
}
func (UnimplementedFloorsServiceServer) Floor2(context.Context, *Floor2PathRequest) (*Floor2PathAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Floor2 not implemented")
}
func (UnimplementedFloorsServiceServer) Floor3(context.Context, *Floor3Try) (*Floor3Try, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Floor3 not implemented")
}
func (UnimplementedFloorsServiceServer) Floor3Results(context.Context, *Floor3ResultsRequest) (*Floor3ResultsAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Floor3Results not implemented")
}
func (UnimplementedFloorsServiceServer) mustEmbedUnimplementedFloorsServiceServer() {}

// UnsafeFloorsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FloorsServiceServer will
// result in compilation errors.
type UnsafeFloorsServiceServer interface {
	mustEmbedUnimplementedFloorsServiceServer()
}

func RegisterFloorsServiceServer(s grpc.ServiceRegistrar, srv FloorsServiceServer) {
	s.RegisterService(&FloorsService_ServiceDesc, srv)
}

func _FloorsService_StartMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Start)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FloorsServiceServer).StartMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/floors.FloorsService/StartMission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FloorsServiceServer).StartMission(ctx, req.(*Start))
	}
	return interceptor(ctx, in, info, handler)
}

func _FloorsService_MercenaryReady_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FloorsServiceServer).MercenaryReady(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/floors.FloorsService/MercenaryReady",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FloorsServiceServer).MercenaryReady(ctx, req.(*ReadyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FloorsService_Floor1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Floor1ResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FloorsServiceServer).Floor1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/floors.FloorsService/Floor1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FloorsServiceServer).Floor1(ctx, req.(*Floor1ResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FloorsService_Floor2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Floor2PathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FloorsServiceServer).Floor2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/floors.FloorsService/Floor2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FloorsServiceServer).Floor2(ctx, req.(*Floor2PathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FloorsService_Floor3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Floor3Try)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FloorsServiceServer).Floor3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/floors.FloorsService/Floor3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FloorsServiceServer).Floor3(ctx, req.(*Floor3Try))
	}
	return interceptor(ctx, in, info, handler)
}

func _FloorsService_Floor3Results_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Floor3ResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FloorsServiceServer).Floor3Results(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/floors.FloorsService/Floor3Results",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FloorsServiceServer).Floor3Results(ctx, req.(*Floor3ResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FloorsService_ServiceDesc is the grpc.ServiceDesc for FloorsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FloorsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "floors.FloorsService",
	HandlerType: (*FloorsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartMission",
			Handler:    _FloorsService_StartMission_Handler,
		},
		{
			MethodName: "MercenaryReady",
			Handler:    _FloorsService_MercenaryReady_Handler,
		},
		{
			MethodName: "Floor1",
			Handler:    _FloorsService_Floor1_Handler,
		},
		{
			MethodName: "Floor2",
			Handler:    _FloorsService_Floor2_Handler,
		},
		{
			MethodName: "Floor3",
			Handler:    _FloorsService_Floor3_Handler,
		},
		{
			MethodName: "Floor3Results",
			Handler:    _FloorsService_Floor3Results_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "floors/floors.proto",
}
